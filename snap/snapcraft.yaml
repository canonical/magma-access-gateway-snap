name: magma-access-gateway
base: core20
version: '1.9'
summary: Snap for Magma Access Gateway
description: |-
  The Access Gateway (AGW) provides network services and policy enforcement. In an LTE network, 
  the AGW implements an evolved packet core (EPC), and a combination of an AAA and a PGW. It works 
  with existing, unmodified commercial radio hardware.
  For more information on Magma please visit the official website - https://magmacore.org/.
  
  **WARNING:** Installing this snap will affect your computer's networking configuration. 
  Make sure it is installed on designated hardware (personal computers are strongly discouraged).
  
  **System requirements:**
  
  Hardware (baremetal strongly recommended)

  - Processor: x86-64 dual-core processor (around 2GHz clock speed or faster)
  - Memory: 4GB RAM
  - Storage: 32GB or greater SSD
  
  Networking
  
  - At least two ethernet interfaces (SGi and S1)
  - Internet connectivity from SGi interface
  
  Operating System

  - Ubuntu 20.04 LTS

grade: devel
confinement: classic

package-repositories:
  - type: apt
    components:
      - jdk1.8
    suites:
      - stable
    url: https://storage.googleapis.com/bazel-apt
    key-id: 71A1D0EFCFEB6281FD0437C93D5919B448457EE0
    key-server: https://bazel.build/bazel-release.pub.gpg

environment:
  PYTHONPATH: "$SNAP/lib/python3.8/site-packages"

apps:
  install:
    command: bin/install-agw
  configure:
    command: bin/configure-agw
  post-install:
    command: bin/agw-postinstall

parts:
  install:
    plugin: python
    source: python
    build-packages:
      - libsystemd-dev
      - pkg-config


  bcc-tools:
    plugin: cmake
    source: https://github.com/iovisor/bcc.git
    source-type: git
    source-branch: v0.23.0
    cmake-parameters:
      - -DPYTHON_CMD=python3
    build-packages:
      - bison
      - flex
      - libedit-dev
      - libllvm7
      - llvm-7-dev
      - libclang-7-dev
      - python3
      - python3-distutils
      - python3-pip
      - zlib1g-dev
      - libelf-dev
      - libfl-dev
      - luajit
      - libluajit-5.1-dev
    build-environment:
      - PKGNAME: "bcc-tools"
      - ITERATION: "1"
      - PKGVERSION: "0.23"
      - WORK_DIR: "/tmp/build-${PKGNAME}"
      - PKGFMT: "deb"
      - ARCH: "amd64"
      - BUILD_PATH: ${OUTPUT_DIR}/${PKGFILE}
      - PACKAGE: ${PKGNAME}_${PKGVERSION}-${ITERATION}_${ARCH}.${PKGFMT}
    override-build: |
      set -x
      
      pip3 install setuptools==65.6.3
      
      snapcraftctl build
      
      gem install fpm
      fpm \
      -s dir \
      -t "$PKGFMT" \
      -a "$ARCH" \
      -n "$PKGNAME" \
      -v "$PKGVERSION" \
      --iteration "$ITERATION" \
      --provides "$PKGNAME" \
      --conflicts "$PKGNAME" \
      --replaces "$PKGNAME" \
      --package ${PACKAGE} \
      --description 'bcc tools' \
      -C $SNAPCRAFT_PART_INSTALL \

      mv ${PACKAGE} $SNAPCRAFT_PART_INSTALL/

  liblfds:
    plugin: make
    source: https://liblfds.org/git/liblfds
    source-type: git
    build-environment:
      - PKGNAME: "liblfds710"
      - ITERATION: "1"
      - PKGVERSION: "7.1.0"
      - WORK_DIR: "/tmp/build-${PKGNAME}"
      - PKGFMT: "deb"
      - ARCH: "amd64"
      - BUILD_PATH: ${OUTPUT_DIR}/${PKGFILE}
      - PACKAGE: ${PKGNAME}_${PKGVERSION}-${ITERATION}_${ARCH}.${PKGFMT}
    override-build: |
      set -x
      cd liblfds/liblfds7.1.0/liblfds710/build/gcc_gnumake
      make so_vanilla
      mkdir -p $SNAPCRAFT_PART_INSTALL/usr/local/include $SNAPCRAFT_PART_INSTALL/usr/local/lib
      make INSINCDIR="$SNAPCRAFT_PART_INSTALL/usr/local/include" INSLIBDIR="$SNAPCRAFT_PART_INSTALL/usr/local/lib" so_install

      gem install fpm
      fpm \
      -s dir \
      -t ${PKGFMT} \
      -a ${ARCH} \
      -n ${PKGNAME} \
      -v ${PKGVERSION} \
      --iteration ${ITERATION} \
      --provides ${PKGNAME} \
      --conflicts ${PKGNAME} \
      --replaces ${PKGNAME} \
      --package ${PACKAGE} \
      --description 'Lock-free data structure library' \
      -C $SNAPCRAFT_PART_INSTALL \

      mv ${PACKAGE} $SNAPCRAFT_PART_INSTALL/

  magma-libfluid:
    plugin: autotools
    source: patches/magma-libfluid
    build-environment:
      - LIBFLUID_BASE_COMMIT: "56df5e20c49387ab8e6b5cd363c6c10d309f263e"
      - LIBFLUID_MSG_COMMIT: "71a4fccdedfabece730082fbe87ef8ae5f92059f"
      - PKGNAME: "magma-libfluid"
      - ITERATION: "7"
      - GIT_VERSION: "0.1.0"
      - PKGVERSION: ${GIT_VERSION}.7
      - WORK_DIR: "/tmp/build-${PKGNAME}"
      - PKGFMT: "deb"
      - ARCH: "amd64"
      - BUILD_PATH: ${OUTPUT_DIR}/${PKGFILE}
      - PACKAGE: ${PKGNAME}_${PKGVERSION}-${ITERATION}_${ARCH}.${PKGFMT}
    override-build: |
      set -x
      cd $SNAPCRAFT_PART_SRC
      rm -rf libfluid_base libfluid_msg

      git clone https://github.com/OpenNetworkingFoundation/libfluid_base.git
      git -C libfluid_base checkout $LIBFLUID_BASE_COMMIT

      pushd libfluid_base
      git apply $SNAPCRAFT_PART_SRC/base/ExternalEventPatch.patch
      git apply $SNAPCRAFT_PART_SRC/base/EVLOOP_NO_EXIT_ON_EMPTY_compat.patch
      ./autogen.sh
      ./configure --prefix=/usr
      make
      make install DESTDIR=$SNAPCRAFT_PART_INSTALL
      popd

      git clone https://github.com/OpenNetworkingFoundation/libfluid_msg.git
      git -C libfluid_msg checkout $LIBFLUID_MSG_COMMIT
      pushd libfluid_msg
      git apply $SNAPCRAFT_PART_SRC/msg/0001-Add-TunnelIPv4Dst-support.patch
      git apply $SNAPCRAFT_PART_SRC/msg/0002-Add-support-for-setting-OVS-reg8.patch
      git apply $SNAPCRAFT_PART_SRC/msg/0003-Add-Reg-field-match-support.patch
      git apply $SNAPCRAFT_PART_SRC/msg/0004-Add-TunnelIPv6Dst-support.patch
      ./autogen.sh
      ./configure --prefix=/usr
      make
      make install DESTDIR=$SNAPCRAFT_PART_INSTALL
      popd

      rm -f ${PACKAGE}

      fpm \
      -s dir \
      -t ${PKGFMT} \
      -a ${ARCH} \
      -n ${PKGNAME} \
      -v ${PKGVERSION} \
      --iteration ${ITERATION} \
      --provides ${PKGNAME} \
      --conflicts ${PKGNAME} \
      --replaces ${PKGNAME} \
      --package ${PACKAGE} \
      --depends "libevent-dev" \
      --depends "libssl-dev" \
      --description 'Libfluid Openflow Controller' \
      -C $SNAPCRAFT_PART_INSTALL \

      mv ${PACKAGE} $SNAPCRAFT_PART_INSTALL/

  prometheus-cpp-dev:
    plugin: cmake
    build-packages:
      - libprotobuf-dev
      - protobuf-compiler
    build-environment:
      - PKGNAME: "prometheus-cpp-dev"
      - COMMIT: "d8326b2bba945a435f299e7526c403d7a1f68c1f"
      - ITERATION: "1"
      - PKGVERSION: "1.0.2"
      - WORK_DIR: "/tmp/build-${PKGNAME}"
      - PKGFMT: "deb"
      - ARCH: "amd64"
      - BUILD_PATH: ${OUTPUT_DIR}/${PKGFILE}
      - PACKAGE: ${PKGNAME}_${PKGVERSION}-${ITERATION}_${ARCH}.${PKGFMT}
    override-build: |
      set -x

      cd $SNAPCRAFT_PART_SRC
      rm -rf prometheus-cpp

      git clone https://github.com/jupp0r/prometheus-cpp
      cd prometheus-cpp
      git checkout ${COMMIT}
      git submodule update --init
      cd ..
      cp -rf $SNAPCRAFT_PART_SRC/prometheus-cpp/* $SNAPCRAFT_PART_SRC/

      snapcraftctl build

      fpm \
      -s dir \
      -t ${PKGFMT} \
      -a ${ARCH} \
      -n ${PKGNAME} \
      -v ${PKGVERSION} \
      --iteration ${ITERATION} \
      --provides ${PKGNAME} \
      --conflicts ${PKGNAME} \
      --replaces ${PKGNAME} \
      --package ${PACKAGE} \
      --description 'Prometheus C++ Library' \
      -C $SNAPCRAFT_PART_INSTALL \

      mv ${PACKAGE} $SNAPCRAFT_PART_INSTALL/

  magma-libtacopie:
    plugin: cmake
    source: https://github.com/Cylix/tacopie.git
    source-commit: 8714fcec4ba9694fb00e83e788aadc099bd0fd5d
    source-type: git
    cmake-parameters:
      - -DCMAKE_BUILD_TYPE=Release
    build-environment:
      - PKGNAME: "magma-libtacopie"
      - ITERATION: "1"
      - PKGVERSION: "3.2.0.1"
      - WORK_DIR: "/tmp/build-${PKGNAME}"
      - PKGFMT: "deb"
      - ARCH: "amd64"
      - BUILD_PATH: ${OUTPUT_DIR}/${PKGFILE}
      - PACKAGE: ${PKGNAME}_${PKGVERSION}-${ITERATION}_${ARCH}.${PKGFMT}
    override-build: |
      set -x

      snapcraftctl build

      gem install fpm
      fpm \
      -s dir \
      -t ${PKGFMT} \
      -a ${ARCH} \
      -n ${PKGNAME} \
      -v ${PKGVERSION} \
      --iteration ${ITERATION} \
      --provides ${PKGNAME} \
      --conflicts ${PKGNAME} \
      --replaces ${PKGNAME} \
      --package ${PACKAGE} \
      --description 'TacoPie C++ library' \
      -C $SNAPCRAFT_PART_INSTALL \

      mv ${PACKAGE} $SNAPCRAFT_PART_INSTALL/

  magma-cpp-redis:
    plugin: cmake
    after:
      - magma-libtacopie
    source: https://github.com/Cylix/cpp_redis.git
    source-commit: e7ef1f30eef8a073b0ff4ef90ad7e254167afc18
    source-type: git
    cmake-parameters:
      - -DCMAKE_BUILD_TYPE=Release
    build-environment:
      - PKGNAME: "magma-cpp-redis"
      - ITERATION: "2"
      - PKGVERSION: "4.3.1.2"
      - WORK_DIR: "/tmp/build-${PKGNAME}"
      - PKGFMT: "deb"
      - ARCH: "amd64"
      - BUILD_PATH: ${OUTPUT_DIR}/${PKGFILE}
      - PACKAGE: ${PKGNAME}_${PKGVERSION}-${ITERATION}_${ARCH}.${PKGFMT}
    override-build: |
      set -x

      cp -r -L /root/parts/magma-libtacopie/install/usr/local/include/* /usr/local/include/
      cp -r -L /root/parts/magma-libtacopie/install/usr/local/lib/* /usr/local/lib/

      snapcraftctl build

      fpm \
      -s dir \
      -t ${PKGFMT} \
      -a ${ARCH} \
      -n ${PKGNAME} \
      -v ${PKGVERSION} \
      --iteration ${ITERATION} \
      --provides ${PKGNAME} \
      --conflicts ${PKGNAME} \
      --replaces ${PKGNAME} \
      --package ${PACKAGE} \
      --depends magma-libtacopie \
      --description 'Redis C++ client library' \
      -C $SNAPCRAFT_PART_INSTALL \

      mv ${PACKAGE} $SNAPCRAFT_PART_INSTALL/

      rm -rf $SNAPCRAFT_PART_INSTALL/usr/local/lib/libtacopie.a

  oai-asn1c:
    plugin: autotools
    source: https://gitlab.eurecom.fr/oai/asn1c.git
    source-type: git
    source-commit: f12568d617dbf48497588f8e227d70388fa217c9
    build-packages:
      - ruby
      - ruby-dev
      - rubygems
    build-environment:
      - PKGNAME: "oai-asn1c"
      - ITERATION: "0"
      - COMMIT_INDEX: "0"
      - COMMIT_DATE: "20190423"
      - COMMIT: "f12568d6"
      - PKGVERSION: 0~${COMMIT_DATE}+c${COMMIT_INDEX}~r${COMMIT}
      - WORK_DIR: "/tmp/build-${PKGNAME}"
      - PKGFMT: "deb"
      - ARCH: "amd64"
      - BUILD_PATH: ${OUTPUT_DIR}/${PKGFILE}
      - PACKAGE: ${PKGNAME}_${PKGVERSION}-${ITERATION}_${ARCH}.${PKGFMT}
    override-build: |
      set -x
      snapcraftctl build

      gem install fpm
      fpm \
      -s dir \
      -t "${PKGFMT}" \
      -a "${ARCH}" \
      -n "${PKGNAME}" \
      -v "${PKGVERSION}" \
      --iteration "${ITERATION}" \
      --provides "${PKGNAME}" \
      --conflicts "${PKGNAME}" \
      --replaces "${PKGNAME}" \
      --package  ${PACKAGE} \
      -C $SNAPCRAFT_PART_INSTALL \
      --description "ASN.1 (Release 15) compiler with OpenAirInterface (OAI)
      specific changes. ASN.1 to C compiler takes the ASN.1 module files (example)
      and generates the C++ compatible C source code. That code can be used to
      serialize the native C structures into compact and unambiguous
      BER/XER/PER-based data files, and deserialize the files back."

      mv ${PACKAGE} $SNAPCRAFT_PART_INSTALL/

  oai-gnutls:
    plugin: autotools
    after:
      - oai-nettle
    source: http://mirrors.dotsrc.org/gcrypt/gnutls/v3.1/gnutls-3.1.23.tar.xz
    source-type: tar
    autotools-configure-parameters:
      - --with-libnettle-prefix=/root/parts/oai-nettle/install/usr/local/
    build-packages:
      - libtasn1-6-dev
      - libp11-kit-dev
      - libtspi-dev
      - libtspi1
      - libidn2-0-dev
      - libidn11-dev
      - ruby
      - ruby-dev
      - rubygems
    build-environment:
      - PKGNAME: "oai-gnutls"
      - ITERATION: "1"
      - PKGVERSION: "3.1.23"
      - WORK_DIR: "/tmp/build-${PKGNAME}"
      - PKGFMT: "deb"
      - ARCH: "amd64"
      - BUILD_PATH: ${OUTPUT_DIR}/${PKGFILE}
      - PACKAGE: ${PKGNAME}_${PKGVERSION}-${ITERATION}_${ARCH}.${PKGFMT}
    override-build: |
      set -x
      patch gl/stdio-impl.h <<'EOF'
      @@ -18,6 +18,9 @@
          the same implementation of stdio extension API, except that some fields
          have different naming conventions, or their access requires some casts.  */

      +#if !defined _IO_IN_BACKUP && defined _IO_EOF_SEEN
      +# define _IO_IN_BACKUP 0x100
      +#endif

       /* BSD stdio derived implementations.  */

      EOF
      patch gl/fseterr.c <<'EOF'
      @@ -29,7 +29,7 @@
         /* Most systems provide FILE as a struct and the necessary bitmask in
            <stdio.h>, because they need it for implementing getc() and putc() as
            fast macros.  */
      -#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
      +#if defined _IO_EOF_SEEN || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
         fp->_flags |= _IO_ERR_SEEN;
       #elif defined __sferror || defined __DragonFly__ /* FreeBSD, NetBSD, OpenBSD, DragonFly, Mac OS X, Cygwin */
         fp_->_flags |= __SERR;
      EOF

      snapcraftctl build

      gem install fpm
      fpm \
      -s dir \
      -t ${PKGFMT} \
      -a ${ARCH} \
      -n ${PKGNAME} \
      -v ${PKGVERSION} \
      --iteration ${ITERATION} \
      --provides ${PKGNAME} \
      --conflicts ${PKGNAME} \
      --replaces ${PKGNAME} \
      --package ${PACKAGE} \
      --depends "libtspi1" \
      --description 'GnuTLS is a secure communications library implementing the SSL, TLS and DTLS protocols and technologies around them.' \
      -C $SNAPCRAFT_PART_INSTALL

      mv ${PACKAGE} $SNAPCRAFT_PART_INSTALL/

  oai-freediameter:
    plugin: cmake
    after:
      - oai-gnutls
    source: patches/oai-freediameter
    cmake-parameters:
      - -DCMAKE_C_FLAGS=-DOLD_SCTP_SOCKET_API=1
    build-packages:
      - bison
      - build-essential
      - flex
      - git
      - libgcrypt20-dev
      - libsctp-dev
      - ruby
      - ruby-dev
      - rubygems
    build-environment:
      - PKGNAME: "oai-freediameter"
      - ITERATION: "1"
      - PKGVERSION: "0.0.2"
      - WORK_DIR: "/tmp/build-${PKGNAME}"
      - PKGFMT: "deb"
      - ARCH: "amd64"
      - BUILD_PATH: ${OUTPUT_DIR}/${PKGFILE}
      - PACKAGE: ${PKGNAME}_${PKGVERSION}-${ITERATION}_${ARCH}.${PKGFMT}
    override-build: |
      set -x
      cd $SNAPCRAFT_PART_SRC
      rm -rf opencord.org.freeDiameter
      git clone https://github.com/lionelgo/opencord.org.freeDiameter.git
      cd opencord.org.freeDiameter
      git checkout 13b0e7de0d66906d50e074a339f890d6e59813ad
      patch -p1 < "$SNAPCRAFT_PART_SRC/0001-opencoord.org.freeDiameter.patch"
      patch -p1 < "$SNAPCRAFT_PART_SRC/0002-opencoord.org.freeDiameter.patch"
      awk '{if (/^DISABLE_SCTP/) gsub(/OFF/, "ON"); print}' CMakeCache.txt > tmp && mv tmp CMakeCache.txt
      cp -rf $SNAPCRAFT_PART_SRC/opencord.org.freeDiameter/* $SNAPCRAFT_PART_SRC/

      cp -rf -L /root/parts/oai-gnutls/install/usr/local/lib/* /usr/local/lib/
      cp -rf -L /root/parts/oai-gnutls/install/usr/local/include/* /usr/local/include/

      snapcraftctl build

      gem install fpm
      fpm \
      -s dir \
      -t "${PKGFMT}" \
      -a "${ARCH}" \
      -n "${PKGNAME}" \
      -v "${PKGVERSION}" \
      --iteration "${ITERATION}" \
      --provides "${PKGNAME}" \
      --conflicts "${PKGNAME}" \
      --replaces "${PKGNAME}" \
      --package ${PACKAGE} \
      --description 'freediameter' \
      -C $SNAPCRAFT_PART_INSTALL

      mv ${PACKAGE} $SNAPCRAFT_PART_INSTALL/

  oai-nettle:
    plugin: autotools
    source: https://ftp.gnu.org/gnu/nettle/nettle-2.5.tar.gz
    source-type: tar
    build-packages:
      - build-essential
      - libgmp-dev
      - ruby
      - ruby-dev
      - rubygems
    autotools-configure-parameters:
      - --disable-openssl
      - --enable-shared
    build-environment:
      - PKGNAME: "oai-nettle"
      - ITERATION: "1"
      - PKGVERSION: "2.5"
      - WORK_DIR: "/tmp/build-${PKGNAME}"
      - PKGFMT: "deb"
      - ARCH: "amd64"
      - BUILD_PATH: ${OUTPUT_DIR}/${PKGFILE}
      - PACKAGE: ${PKGNAME}_${PKGVERSION}-${ITERATION}_${ARCH}.${PKGFMT}
    override-build: |
      set -x

      snapcraftctl build

      gem install fpm
      fpm \
      -s dir \
      -t ${PKGFMT} \
      -a ${ARCH} \
      -n ${PKGNAME} \
      -v ${PKGVERSION} \
      --iteration ${ITERATION} \
      --provides ${PKGNAME} \
      --conflicts ${PKGNAME} \
      --replaces ${PKGNAME} \
      --package ${PACKAGE} \
      --description 'A low-level cryptographic library' \
      -C $SNAPCRAFT_PART_INSTALL

      mv ${PACKAGE} $SNAPCRAFT_PART_INSTALL/

  sentry-native:
    plugin: cmake
    source: https://github.com/getsentry/sentry-native/releases/download/0.4.12/sentry-native.zip
    source-type: zip
    cmake-parameters:
      - -DCMAKE_BUILD_TYPE=RelWithDebInfo
    build-packages:
      - libcurl4-openssl-dev
      - libgcrypt20-dev
      - libsctp-dev
      - bison
      - flex
    build-environment:
      - PKGNAME: "sentry-native"
      - ITERATION: "1"
      - PKGVERSION: "0.4.12"
      - WORK_DIR: "/tmp/build-${PKGNAME}"
      - PKGFMT: "deb"
      - ARCH: "amd64"
      - BUILD_PATH: ${OUTPUT_DIR}/${PKGFILE}
      - PACKAGE: ${PKGNAME}_${PKGVERSION}-${ITERATION}_${ARCH}.${PKGFMT}
    override-build: |
      set -x
      snapcraftctl build

      gem install fpm
      fpm \
      -s dir \
      -t "$PKGFMT" \
      -a "$ARCH" \
      -n "$PKGNAME" \
      -v "$PKGVERSION" \
      --iteration "$ITERATION" \
      --provides "$PKGNAME" \
      --conflicts "$PKGNAME" \
      --replaces "$PKGNAME" \
      --package ${PACKAGE} \
      --description 'sentry-native' \
      -C $SNAPCRAFT_PART_INSTALL

      mv ${PACKAGE} $SNAPCRAFT_PART_INSTALL/

  grpc-dev:
    plugin: make
    source: https://github.com/grpc/grpc
    source-type: git
    source-tag: v1.15.0
    build-environment:
      - PKGNAME: "grpc-dev"
      - ITERATION: "3"
      - GIT_VERSION: "1.15.0"
      - WORK_DIR: "/tmp/build-${PKGNAME}"
      - PKGFMT: "deb"
      - ARCH: "amd64"
      - BUILD_PATH: ${OUTPUT_DIR}/${PKGFILE}
      - PACKAGE: ${PKGNAME}_${PKGVERSION}-${ITERATION}_${ARCH}.${PKGFMT}
    build-packages:
      - libprotoc-dev
    override-build: |
      set -x

      patch src/core/lib/gpr/log_linux.cc <<'EOF'
      @@ -40,7 +40,7 @@
       #include <time.h>
       #include <unistd.h>

      -static long gettid(void) { return syscall(__NR_gettid); }
      +static long sys_gettid(void) { return syscall(__NR_gettid); }

       void gpr_log(const char* file, int line, gpr_log_severity severity,
                    const char* format, ...) {
      @@ -70,7 +70,7 @@ void gpr_default_log(gpr_log_func_args* args) {
         gpr_timespec now = gpr_now(GPR_CLOCK_REALTIME);
         struct tm tm;
         static __thread long tid = 0;
      -  if (tid == 0) tid = gettid();
      +  if (tid == 0) tid = sys_gettid();

         timer = static_cast<time_t>(now.tv_sec);
         final_slash = strrchr(args->file, '/');
      EOF

      patch src/core/lib/gpr/log_posix.cc <<'EOF'
      @@ -30,7 +30,7 @@
       #include <string.h>
       #include <time.h>

      -static intptr_t gettid(void) { return (intptr_t)pthread_self(); }
      +static intptr_t sys_gettid(void) { return (intptr_t)pthread_self(); }

       void gpr_log(const char* file, int line, gpr_log_severity severity,
                    const char* format, ...) {
      @@ -86,7 +86,7 @@ void gpr_default_log(gpr_log_func_args* args) {
         char* prefix;
         gpr_asprintf(&prefix, "%s%s.%09d %7" PRIdPTR " %s:%d]",
                      gpr_log_severity_string(args->severity), time_buffer,
      -               (int)(now.tv_nsec), gettid(), display_file, args->line);
      +               (int)(now.tv_nsec), sys_gettid(), display_file, args->line);

         fprintf(stderr, "%-70s %s\n", prefix, args->message);
         gpr_free(prefix);
      EOF

      patch src/core/lib/iomgr/ev_epollex_linux.cc <<'EOF'
      @@ -1146,7 +1146,7 @@
       }

       #ifndef NDEBUG
      -static long gettid(void) { return syscall(__NR_gettid); }
      +static long sys_gettid(void) { return syscall(__NR_gettid); }
       #endif

       /* pollset->mu lock must be held by the caller before calling this.
      @@ -1166,7 +1166,7 @@
       #define WORKER_PTR (&worker)
       #endif
       #ifndef NDEBUG
      -  WORKER_PTR->originator = gettid();
      +  WORKER_PTR->originator = sys_gettid();
       #endif
         if (GRPC_TRACE_FLAG_ENABLED(grpc_polling_trace)) {
           gpr_log(GPR_INFO,
      EOF

      sed -i 's/-Werror/ /g' Makefile

      sed -i 's/.usr.local$/\/tmp\/build-grpc-dev\/install\/usr\/local/' Makefile

      snapcraftctl build

      fpm \
      -s dir \
      -t ${PKGFMT} \
      -a ${ARCH} \
      -n ${PKGNAME} \
      -v ${GIT_VERSION} \
      --iteration ${ITERATION} \
      --depends "libgoogle-perftools4" \
      --provides ${PKGNAME} \
      --conflicts ${PKGNAME} \
      --replaces ${PKGNAME} \
      --package ${PACKAGE} \
      --description 'gRPC library' \
      -C $SNAPCRAFT_PART_INSTALL

      mv ${PACKAGE} $SNAPCRAFT_PART_INSTALL/

  ovs:
    plugin: cmake
    source: patches/ovs
    build-packages:
      - git
      - build-essential
      - linux-headers-generic
      - dh-make
      - debhelper
      - dh-python
      - devscripts
      - python3-dev
      - graphviz
      - libssl-dev
      - python3-all
      - python3-sphinx
      - libunbound-dev
      - libunwind-dev
    override-build: |
      set -x

      cd $SNAPCRAFT_PART_SRC
      rm -rf ovs
      git clone  https://github.com/openvswitch/ovs
      cd ovs/
      git checkout 31288dc725be6bc8eaa4e8641ee28895c9d0fd7a
      git apply $SNAPCRAFT_PART_SRC/00*
      DEB_BUILD_OPTIONS='parallel=8 nocheck' fakeroot debian/rules binary

      mv ../*.deb $SNAPCRAFT_PART_INSTALL/

  bazel:
    plugin: nil
    build-packages:
      - wget
    override-build: |
      set -x
      wget -O /usr/local/bin/bazel https://github.com/bazelbuild/bazelisk/releases/latest/download/bazelisk-linux-amd64
      chmod +x /usr/local/bin/bazel

#  envoy:
#    plugin: nil
#    after:
#      - bazel
#    source: https://github.com/envoyproxy/envoy
#    source-type: git
#    source-tag: v1.24.1
#    build-packages:
#      - cmake
#      - ninja-build
#    override-build: |
#      set -x
#      cd $SNAPCRAFT_PART_SRC
#      bazel build distribution:debs
#      ls bazel-bin/distribution/
#
#      mv bazel-bin/distribution/envoy*.deb $SNAPCRAFT_PART_INSTALL/

  envoy:
    plugin: nil
    build-packages:
      - curl
    build-environment:
      - GETENVOY_VERSION: "1.16.2.p0.ge98e41a-1p71.gbe6132a"
    override-build: |
      set -x
      rm -rf /etc/apt/sources.list.d/getenvoy.list /usr/share/keyrings/getenvoy-keyring.gpg
      curl -sL 'https://deb.dl.getenvoy.io/public/gpg.8115BA8E629CC074.key' | gpg --dearmor -o /usr/share/keyrings/getenvoy-keyring.gpg
      echo "deb [arch=amd64 signed-by=/usr/share/keyrings/getenvoy-keyring.gpg] https://deb.dl.getenvoy.io/public/deb/ubuntu focal main" | tee /etc/apt/sources.list.d/getenvoy.list
      apt update
      apt-cache policy getenvoy-envoy
      apt download getenvoy-envoy=$GETENVOY_VERSION
      mv getenvoy-envoy*.deb $SNAPCRAFT_PART_INSTALL/

  td-agent-bit:
    plugin: nil
    build-environment:
      - TD_AGENT_BIT_VERSION: "1.7.8"
    override-build: |
      set -x
      rm -rf /etc/apt/sources.list.d/fluentbit.list /usr/share/keyrings/fluentbit-keyring.gpg
      curl -sL 'https://packages.fluentbit.io/fluentbit.key' | gpg --dearmor -o /usr/share/keyrings/fluentbit-keyring.gpg
      echo "deb [arch=amd64 signed-by=/usr/share/keyrings/fluentbit-keyring.gpg] https://packages.fluentbit.io/ubuntu/focal focal main" | tee /etc/apt/sources.list.d/fluentbit.list
      apt update
      apt download td-agent-bit=$TD_AGENT_BIT_VERSION
      mv td-agent-bit*.deb $SNAPCRAFT_PART_INSTALL/

  libfolly-dev:
    plugin: autotools
    source: https://github.com/facebook/folly.git
    source-type: git
    source-tag: v2018.02.26.00
    build-packages:
      - libboost-all-dev
      - libevent-dev
      - libdouble-conversion-dev
      - libgoogle-glog-dev
      - libgflags-dev
      - libiberty-dev
      - liblz4-dev
      - liblzma-dev
      - libsnappy-dev
      - zlib1g-dev
      - binutils-dev
      - libjemalloc-dev
      - libssl-dev
      - pkg-config
    build-environment:
      - BOOST_VERSION: "1.71.0"
      - LIBGFLAGS: "libgflags2.2"
      - LIBEVENT_VERSION: "2.1-7"
      - SSL_VERSION: "1.1"
      - LIBICU: "libicu66"
      - DOUBLE_CONVERSION_VERSION: "3"
      - JEMALLOC_VERSION: "2"
      - DESTDIR: $SNAPCRAFT_PART_INSTALL/
      - DEBUGDIR: ${DESTDIR}/usr/local/lib/debug
      - PKGNAME: "libfolly-dev"
      - ITERATION: "7"
      - GIT_VERSION: "2018.02.26.00"
      - WORK_DIR: "/tmp/build-${PKGNAME}"
      - PKGFMT: "deb"
      - ARCH: "amd64"
      - BUILD_PATH: ${OUTPUT_DIR}/${PKGFILE}
      - PACKAGE: ${PKGNAME}_${PKGVERSION}-${ITERATION}_${ARCH}.${PKGFMT}
    override-build: |
      set -x

      cd folly

      autoreconf -ivf
      ./configure
      make -j $(nproc)
      make install DESTDIR=${DESTDIR}

      # Only include stripped .so files
      [ -d "$DEBUGDIR/usr/local/lib" ] || mkdir -p "$DEBUGDIR/usr/local/lib"
      find "$DESTDIR/usr/local/lib" -maxdepth 1 -iname "lib*.so.*" -type f \
        -execdir objcopy --only-keep-debug {} "$DEBUGDIR/usr/local/lib/{}.debug" \; \
        -execdir strip --strip-debug --strip-unneeded {} \; \
        -execdir objcopy --add-gnu-debuglink "$DEBUGDIR/usr/local/lib/{}.debug" {} \;

      fpm \
      -s dir \
      -t ${PKGFMT} \
      -a ${ARCH} \
      -n ${PKGNAME} \
      -v ${GIT_VERSION} \
      -C $SNAPCRAFT_PART_INSTALL \
      --iteration ${ITERATION} \
      --description "Facebook Folly C++ Library" \
      --provides ${PKGNAME} \
      --conflicts ${PKGNAME} \
      --replaces ${PKGNAME} \
      --package ${PACKAGE} \
      --depends libc6 \
      --depends libstdc++6 \
      --depends libboost-context"$BOOST_VERSION" \
      --depends libboost-filesystem"$BOOST_VERSION" \
      --depends libboost-program-options"$BOOST_VERSION" \
      --depends libboost-regex"$BOOST_VERSION" \
      --depends libboost-system"$BOOST_VERSION" \
      --depends libboost-thread"$BOOST_VERSION" \
      --depends libdouble-conversion"${DOUBLE_CONVERSION_VERSION}" \
      --depends libevent-"$LIBEVENT_VERSION" \
      --depends "${LIBGFLAGS}" \
      --depends libgoogle-glog0v5 \
      --depends "${LIBICU}" \
      --depends libjemalloc"${JEMALLOC_VERSION}" \
      --depends liblz4-1 \
      --depends liblzma5 \
      --depends libsnappy1v5 \
      --depends libssl"$SSL_VERSION" \
      --depends zlib1g \
      --exclude usr/local/lib/debug \
      --exclude usr/local/lib/*.a \
      --exclude usr/local/lib/*.la \
      --exclude usr/local/lib/*init* \
      --exclude usr/local/lib/*logging* \
      --exclude usr/local/lib/*benchmark* \
      usr/local/lib \
      usr/local/include

      mv ${PACKAGE} $SNAPCRAFT_PART_INSTALL/

  magma-access-gateway:
    plugin: nil
    after:
      - bazel
      - libfolly-dev
      - bcc-tools
      - oai-asn1c
      - oai-freediameter
      - oai-gnutls
      - oai-nettle
    source: https://github.com/magma/magma
    source-type: git
    build-packages:
      - apt-transport-https
      - apt-utils
      - bison
      - build-essential
      - ca-certificates
      - cmake
      - curl
      - gcc
      - gnupg2
      - g++
      - iproute2
      - iputils-ping
      - flex
      - libconfig-dev
      - libcurl4-openssl-dev
      - libczmq-dev
      - libgcrypt-dev
      - libgmp3-dev
      - libidn11-dev
      - libmnl-dev=1.0.4-2
      - libpcap-dev=1.9.1-3
      - libsctp1
      - libsqlite3-dev
      - libsctp-dev
      - libssl-dev
      - libsystemd-dev
      - lld
      - net-tools
      - netbase
      - python3.8
      - python-is-python3
      - python3-distutils
      - systemd
      - uuid-dev
      - vim
      - libtool=2.4.6-14
    override-build: |
      set -x

      cp -r -L /root/parts/libfolly-dev/install/usr/local/include/* /usr/local/include/
      cp -r -L /root/parts/libfolly-dev/install/usr/local/lib/* /usr/local/lib/

      cp -r -L /root/parts/oai-gnutls/install/usr/local/include/* /usr/include/
      cp -r -L /root/parts/oai-gnutls/install/usr/local/lib/* /usr/lib/
      cp -r -L /root/parts/oai-gnutls/install/usr/local/bin/* /usr/bin/
      cp -r -L /root/parts/oai-gnutls/install/usr/local/share/* /usr/share/

      cp -r -L /root/parts/oai-nettle/install/usr/local/include/* /usr/include/
      cp -r -L /root/parts/oai-nettle/install/usr/local/lib/* /usr/lib/
      cp -r -L /root/parts/oai-nettle/install/usr/local/bin/* /usr/bin/
      cp -r -L /root/parts/oai-nettle/install/usr/local/share/* /usr/share/

      cp -r -L /root/parts/oai-asn1c/install/usr/local/bin/* /usr/local/bin/
      cp -r -L /root/parts/oai-asn1c/install/usr/local/share/* /usr/local/share/

      cp -r -L /root/parts/oai-freediameter/install/usr/local/include/* /usr/local/include/
      cp -r -L /root/parts/oai-freediameter/install/usr/local/lib/* /usr/local/lib/
      cp -r -L /root/parts/oai-freediameter/install/usr/local/bin/* /usr/local/bin/

      bazel build lte/gateway/release:release_build --config=production
      cp -L -r bazel-bin/lte/gateway/release/* $SNAPCRAFT_PART_INSTALL/
